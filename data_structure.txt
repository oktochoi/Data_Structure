| 메모리 영역        | 설명                   | 예시                  |
| ------------- | -------------------- | ------------------- |
| **코드 영역**     | 실행 코드 저장             | 함수 정의               |
| **스택(Stack)** | 함수 호출 시 생기는 지역 변수 저장 | `int x = 10;`       |
| **힙(Heap)**   | `new`로 만든 동적 메모리 저장  | `int* p = new int;` |
| **데이터 영역**    | 전역 변수, static 변수 저장  | `static int x;`     |


const는 멤버 함수가 멤버 변수를 변경 하지 않음을 보장
기본 접근권한 
struct : public
class : private

&를 붙이는 이유: 참조로 전하기 위해
값 전달 (값 복사)	void func(Cafe r1)	복사본이 함수에 전달됨 → 원본은 변경되지 않음
참조 전달 (&)	void func(Cafe &r1)	원본을 직접 가리킴 → 원본이 변경됨

✅ 스택(Stack)의 정의
스택은 후입선출 방식의 자료구조다.
나중에 들어간 데이터가 가장 먼저 나오는 구조.

✅ 큐(Queue)란?
선입선출(FIFO) 구조의 자료구조
먼저 들어간 데이터가 먼저 나감


✅ 1. Selection Sort (선택 정렬)
🔹 개념 : 가장 작은(또는 큰) 값을 찾아 맨 앞과 교환

비교 횟수는 항상 일정

🔹 시간복잡도O(n²) (최선, 평균, 최악 모두 동일)

안정 정렬 ❌ (같은 값 순서 바뀔 수 있음)

✅ 2. Insertion Sort (삽입 정렬)
🔹 개념 : 이미 정렬된 영역에 새 요소를 올바른 위치에 삽입

거의 정렬된 경우 빠름

최선: O(n) (거의 정렬된 경우)

최악: O(n²)

안정 정렬 ✅

✅ 3. Bubble Sort (버블 정렬)
🔹 개념 : 인접한 두 요소를 비교하고, 큰 값을 뒤로 보내기를 반복

단순하지만 느림

최선: O(n) (이미 정렬된 경우)

최악: O(n²)

안정 정렬 ✅

✅ 4. Quick Sort (퀵 정렬)
🔹 개념 : 피벗을 기준으로 작은 값은 왼쪽, 큰 값은 오른쪽으로 분할 → 재귀

실제로 가장 많이 쓰이는 정렬 (빠름!)

🔹 시간복잡도
평균: O(n log n)

최악: O(n²) (정렬된 상태일 때)

안정 정렬 ❌

✅ 5. Merge Sort (병합 정렬)
🔹 개념 : 배열을 반으로 쪼개서 정렬 후 병합

재귀 기반, 메모리 추가 필요
